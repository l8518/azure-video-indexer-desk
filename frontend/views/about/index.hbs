<div class="container">
    <h1>Overview</h1>
    <p>
        This solution exists to demonstrate different aspects of the Video Indexer and other best practices.
        However, keep in mind that this is not a production-ready solution. The solution demonstrates the
        API-capabilities of the Video Indexer and how Azure Functions can be used to decouple the Video Indexer's UI.
        To showcase some of these functions a Web Application is provided too, which shows how insights generated by the
        Video Indexer can be stored independently and used for other systems, i.e., a web app.
    </p>
    <img class="w-100" src="/solution_overview.png">
    <h1 >Automation with Azure Function</h1>
    <p>
        The Video Indexer can easily be triggered by the provided API. As data from other Cloud-based systems is usually
        stored in Storage Accounts, one might want to automate indexation.
        This can easily be done with an Azure Function, that is triggerd via an Event Grid subscription (see <a
            href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-event-overview">here</a>)
    </p>
    <p>
        Furtermore, the Video Indexer can notify if it has finished indexing by calling a web hook (here a Azure
        Function). This web hook can than trigger a program to pull the indexed data from the Video Indexer via its API.
        Consequently, data can be stored anywhere you like (such as Azure Cosmos DB). Furthermore, any artifact, such as
        thumbnails or key frames, can be downloaded. This solution stores face images and key frames in separate blob
        storage container.
    </p>
    <br />
</div>